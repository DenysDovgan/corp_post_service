spring:
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/postgres
    username: user
    password: password

  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: none
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        jdbc:
          batch_size: 50

  liquibase:
    change-log: classpath:db/changelog/db.changelog-master.yaml

  data:
    redis:
      host: localhost
      port: 6379
      feed-cache:
        max-size: 500
        page-size: 20
        key-prefix: "feed:"
      post-cache:
          sync-rate-ms: 60000
          post: "post:"
          views: "views"
          likes: "likes"
          comments-in-post: 3
      channels:
        calculations_channel:
          name: calculations_channel
        comment_event_channel:
          name: comment_event
        comment_notification_event_channel:
          name: comment_notification_event
        post-view: post_view_channel
        post_like_event_channel:
          name: post_like_event
        post-crated: post_created_topic

  kafka:
    bootstrap-servers: host.docker.internal:9092
    consumer:
      group-id: default-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring:
          json:
            trusted:
              packages: "*"
      auto-offset-reset: earliest
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring:
          json:
            add-type-info: false
    listener:
      missing-topics-fatal: false
    topic-name:
      post-comments: "post-comments"
      posts: "posts"
      post-likes: "post-likes"
      post-views: "post-views"
      heat-feed: "heat-feed"

server:
  port: 8081

post:
  pool-size: 10
  publisher:
    batch-size: 100
    scheduler:
      cron: "0 0/1 * 1/1 * ?" # every minute
  ad-remover:
    scheduler:
      cron: "0 0/1 * 1/1 * ?" # every minute
  spelling-corrector:
    batch-size: 10
    scheduler:
      cron: "0 0 0 * * *" # каждый день в 00:00:00
    retry:
      delay: 2000
      multiplier: 2
    client:
      textgears:
        correct-endpoint: https://api.textgears.com/correct
        lang-detector-endpoint: https://api.textgears.com/detect
        auth-token: secret-key
      yandex:
        url: https://speller.yandex.net/services/spellservice.json/checkText
  images:
    max-to-upload: 10
    max-size: 5242880
    bucket:
      name-prefix: posts/post_

client:
  s3:
    minio:
      url: http://127.0.0.1:9000
      username: user
      password: password
      bucketName: corpbucket

user-service:
  host: localhost
  port: 8080
project-service:
  host: localhost
  port: 8082
payment-service:
  host: localhost
  port: 9080

moderation:
  sublist-size: 10
  thread-pool-size: 5

quartz:
  job:
    interval-seconds: 30

app:
  send-view-events: 30000
  cache-heat:
    batch-size: 1000
  post:
    subgroup:
        size: 1000
    cache:
      post_id_prefix: "post:"
      number_of_top_in_cache: 10
  async-config:
    post-cache-service:
      core_pool_size: 10
      max_pool_size: 20
      queue_capacity: 1000
      thread_mane_prefix: PostCacheProcessExecutor-Async-
    redis-publisher-async-pool:
      core_pool_size: 10
      max_pool_size: 10

springdoc:
  api-docs:
    path: /api-docs

redis:
  banner:
    schedule: "0 0 0 * * ?"
    topic: "user_ban"